// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package scanners

import (
	"sync"
)

// Ensure, that ScannerMock does implement Scanner.
// If this is not the case, regenerate this file with moq.
var _ Scanner = &ScannerMock{}

// ScannerMock is a mock implementation of Scanner.
//
//	func TestSomethingThatUsesScanner(t *testing.T) {
//
//		// make and configure a mocked Scanner
//		mockedScanner := &ScannerMock{
//			DetectSeverityFunc: func(value string) Severity {
//				panic("mock out the DetectSeverity method")
//			},
//			IsSecretFunc: func(value string) bool {
//				panic("mock out the IsSecret method")
//			},
//			NameFunc: func() Name {
//				panic("mock out the Name method")
//			},
//		}
//
//		// use mockedScanner in code that requires Scanner
//		// and then make assertions.
//
//	}
type ScannerMock struct {
	// DetectSeverityFunc mocks the DetectSeverity method.
	DetectSeverityFunc func(value string) Severity

	// IsSecretFunc mocks the IsSecret method.
	IsSecretFunc func(value string) bool

	// NameFunc mocks the Name method.
	NameFunc func() Name

	// calls tracks calls to the methods.
	calls struct {
		// DetectSeverity holds details about calls to the DetectSeverity method.
		DetectSeverity []struct {
			// Value is the value argument value.
			Value string
		}
		// IsSecret holds details about calls to the IsSecret method.
		IsSecret []struct {
			// Value is the value argument value.
			Value string
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
	lockDetectSeverity sync.RWMutex
	lockIsSecret       sync.RWMutex
	lockName           sync.RWMutex
}

// DetectSeverity calls DetectSeverityFunc.
func (mock *ScannerMock) DetectSeverity(value string) Severity {
	if mock.DetectSeverityFunc == nil {
		panic("ScannerMock.DetectSeverityFunc: method is nil but Scanner.DetectSeverity was just called")
	}
	callInfo := struct {
		Value string
	}{
		Value: value,
	}
	mock.lockDetectSeverity.Lock()
	mock.calls.DetectSeverity = append(mock.calls.DetectSeverity, callInfo)
	mock.lockDetectSeverity.Unlock()
	return mock.DetectSeverityFunc(value)
}

// DetectSeverityCalls gets all the calls that were made to DetectSeverity.
// Check the length with:
//
//	len(mockedScanner.DetectSeverityCalls())
func (mock *ScannerMock) DetectSeverityCalls() []struct {
	Value string
} {
	var calls []struct {
		Value string
	}
	mock.lockDetectSeverity.RLock()
	calls = mock.calls.DetectSeverity
	mock.lockDetectSeverity.RUnlock()
	return calls
}

// IsSecret calls IsSecretFunc.
func (mock *ScannerMock) IsSecret(value string) bool {
	if mock.IsSecretFunc == nil {
		panic("ScannerMock.IsSecretFunc: method is nil but Scanner.IsSecret was just called")
	}
	callInfo := struct {
		Value string
	}{
		Value: value,
	}
	mock.lockIsSecret.Lock()
	mock.calls.IsSecret = append(mock.calls.IsSecret, callInfo)
	mock.lockIsSecret.Unlock()
	return mock.IsSecretFunc(value)
}

// IsSecretCalls gets all the calls that were made to IsSecret.
// Check the length with:
//
//	len(mockedScanner.IsSecretCalls())
func (mock *ScannerMock) IsSecretCalls() []struct {
	Value string
} {
	var calls []struct {
		Value string
	}
	mock.lockIsSecret.RLock()
	calls = mock.calls.IsSecret
	mock.lockIsSecret.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *ScannerMock) Name() Name {
	if mock.NameFunc == nil {
		panic("ScannerMock.NameFunc: method is nil but Scanner.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedScanner.NameCalls())
func (mock *ScannerMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}
